AC_INIT(igraph, 0.5.1, csardi@rmki.kfki.hu)
AC_CONFIG_SRCDIR(src/games.c)
AM_INIT_AUTOMAKE(igraph, 0.5.1)
AM_CONFIG_HEADER(config.h)

# Test suite
AC_CONFIG_TESTDIR(tests)
AC_CONFIG_FILES([tests/Makefile tests/atlocal])

AC_PROG_CC
AC_PROG_CXX
AM_PROG_LEX
AC_PROG_YACC

AC_CHECK_HEADER([sys/times.h], 
      [AC_DEFINE([HAVE_TIMES_H], [1], [Define to 1 if you have the sys/times.h header])])

AC_LIBTOOL_WIN32_DLL
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AM_MISSING_PROG([AUTOM4TE], [autom4te])

AC_HEADER_STDC
AC_CHECK_HEADERS([stdarg.h stdlib.h string.h time.h unistd.h])
LIBS_SAVE=$LIBS
LIBS="$LIBS -lm"
AC_CHECK_FUNCS([expm1 rint rintf finite])
LIBS=$LIBS_SAVE

AC_DEFUN([IGRAPH_WARNING],
[AC_MSG_CHECKING(whether compiler accepts $1)
AC_SUBST(WARNING_CFLAGS)
ac_save_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $1"
AC_TRY_COMPILE(,
[int x;],
WARNING_CFLAGS="$WARNING_CFLAGS $1"
AC_MSG_RESULT(yes),
AC_MSG_RESULT(no))
CFLAGS="$ac_save_CFLAGS"])

AC_DEFUN([IGRAPH_CC_SWITCH],
[AC_MSG_CHECKING(whether compiler supports $1)
ac_save_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS $1"
AC_TRY_COMPILE(,
[int x;],
AC_MSG_RESULT(yes)
$2,
AC_MSG_RESULT(no)
$3)
CFLAGS="$ac_save_CFLAGS"])

AC_ARG_ENABLE(gcc-warnings,
              AC_HELP_STRING([--enable-gcc-warnings],
	                     [turn on lots of GCC warnings (not recommended)]),
[case "${enableval}" in
   yes|no) ;;
   *)      AC_MSG_ERROR([bad value ${enableval} for gcc-warnings option]) ;;
 esac],
              [enableval=no])
if test "${enableval}" = yes; then
  IGRAPH_WARNING(-Werror)
  AC_SUBST([WERROR_CFLAGS], [$WARNING_CFLAGS])
  WARNING_CFLAGS=
  IGRAPH_WARNING(-Wall)
  IGRAPH_WARNING(-W)
  IGRAPH_WARNING(-Wbad-function-cast)
  IGRAPH_WARNING(-Wcast-align)
  IGRAPH_WARNING(-Wcast-qual)
  IGRAPH_WARNING(-Wformat)
  IGRAPH_WARNING(-Wmissing-declarations)
  IGRAPH_WARNING(-Wmissing-prototypes)
  IGRAPH_WARNING(-Wnested-externs)
  IGRAPH_WARNING(-Wshadow)
  IGRAPH_WARNING(-Wstrict-prototypes)
  IGRAPH_WARNING(-Wwrite-strings)
fi

use_gprof=no
AC_ARG_ENABLE(profiling,
              AC_HELP_STRING([--enable-profiling], [Enable gprof profiling]),
              [use_gprof=$enableval], [use_gprof=no])

debug=no
AC_ARG_ENABLE(debug,
              AC_HELP_STRING([--enable-debug], [Enable debug build]),
	      [debug=$enableval])

graphml_support=yes
AC_ARG_ENABLE(graphml,
              AC_HELP_STRING([--disable-graphml], [Disable support for GraphML format]),
              [graphml_support=$enableval], [graphml_support=yes])

use_shell=no
AC_ARG_ENABLE(shell,
	      AC_HELP_STRING([--enable-shell], [Enable shell interface]),
	      [use_shell=$enableval])
AM_CONDITIONAL(USE_SHELL, test x$use_shell = xyes)

HAVE_LIBXML=0
if test $graphml_support = yes; then
  AC_PATH_PROG([XML2CONFIG], [xml2-config], [none])
  if test "$XML2CONFIG" = "none"; then
    graphml_support=no
  else
    XML2_LIBS=`$XML2CONFIG --libs`
    XML2_CFLAGS=`$XML2CONFIG --cflags`
    AC_CHECK_LIB([xml2], [xmlSAXUserParseFile], [
      OLDCFLAGS=${CFLAGS}
      OLDCPPFLAGS=${CPPFLAGS}
      CFLAGS=${XML2_CFLAGS}
      CPPFLAGS=${XML2_CFLAGS}
      AC_CHECK_HEADER([libxml/parser.h], [
        HAVE_LIBXML=1
	AC_DEFINE([HAVE_LIBXML], [1], [Define to 1 if you have the libxml2 libraries installed])
        CFLAGS="${OLDCFLAGS} ${XML2_CFLAGS}"
	CPPFLAGS="${OLDCFLAGS} ${XML2_CFLAGS}"
	AC_SUBST(XML2_LIBS)
	AC_SUBST(XML2_CFLAGS)
      ], [
        graphml_support=no
        CFLAGS=${OLDCFLAGS}
	CPPFLAGS=${OLDCPPFLAGS}
      ])
    ], [
      graphml_support=no
    ])
  fi
fi

gmp_support=no
AC_ARG_ENABLE(gmp, AC_HELP_STRING([--disable-gmp], [Compile without the GMP library]))
if test "x$enable_gmp" != "xno"; then
  AC_CHECK_LIB([gmp], [__gmpz_add], [
    AC_CHECK_HEADER([gmp.h], [
      AC_DEFINE([HAVE_GMP], [1], [Define to 1 if you have the GMP library])
      gmp_support=yes
      LDFLAGS="${LDFLAGS} -lgmp"      
    ])
  ])
fi

AC_ARG_WITH([external-blas], [AS_HELP_STRING([--with-external-blas],
		                      [Use external BLAS library [default=no]])],
            [internal_blas=no],
	    [internal_blas=yes])
AC_ARG_WITH([external-lapack], [AS_HELP_STRING([--with-external-lapack],
		                      [Use external LAPACK library [default=no]])],
            [internal_lapack=no],
	    [internal_lapack=yes])
AC_ARG_WITH([external-arpack], [AS_HELP_STRING([--with-external-arpack],
		                      [Use external ARPACK library [default=no]])],
            [internal_arpack=no],
	    [internal_arpack=yes])

if test "$internal_blas" == "no"; then
  AC_CHECK_LIB([blas], [daxpy_], [],
     AC_CHECK_LIB([blas], [daxpy], [],
        AC_CHECK_LIB([blas], [DAXPY_], [],
           AC_CHECK_LIB([blas], [DAXPY], [],
	      [AC_MSG_RESULT(not found, trying to use -lblas anyway.)]))))
  LDFLAGS="${LDFLAGS} -lblas"
else
  AC_DEFINE([INTERNAL_BLAS], [1], [Define to 1 if you use the internal BLAS library])
fi

if test "$internal_lapack" == "no"; then
  AC_CHECK_LIB([lapack], [dlarnv_], [],
     AC_CHECK_LIB([lapack], [dlarnv], [],
        AC_CHECK_LIB([lapack], [DLARNV_], [],
           AC_CHECK_LIB([lapack], [DLARNV], [],
	      [AC_MSG_RESULT(not found, trying to use -llapack anyway.)]))))
  LDFLAGS="${LDFLAGS} -llapack"
else
  AC_DEFINE([INTERNAL_LAPACK], [1], [Define to 1 if you use the internal LAPACK library])
fi

if test "$internal_arpack" == "no"; then
  AC_CHECK_LIB([arpack], [dsaupd_], [],
     AC_CHECK_LIB([arpack], [dsaupd], [],
        AC_CHECK_LIB([arpack], [DSAUPD_], [],
           AC_CHECK_LIB([arpack], [DSAUPD], [],
	      [AC_MSG_RESULT(not found, trying to use -larpack anyway.)]))))
  LDFLAGS="${LDFLAGS} -larpack"
else
  AC_DEFINE([INTERNAL_ARPACK], [1], [Define to 1 if you use the internal ARPACK library])
fi

AM_CONDITIONAL(INTERNAL_ARPACK, test x$internal_arpack = xyes)
AM_CONDITIONAL(INTERNAL_LAPACK, test x$internal_lapack = xyes)
AM_CONDITIONAL(INTERNAL_BLAS, test x$internal_blas = xyes)

if test "$debug" == "yes"; then
  CFLAGS="${CFLAGS} -ggdb -DRC_DEBUG"
  CPPFLAGS="${CFLAGS} -ggdb -DRC_DEBUG"
  CXXFLAGS="${CFLAGS} -ggdb -DRC_DEBUG"
fi

if test "$use_gprof" == "yes"; then
  CFLAGS="${CFLAGS} -pg"
  CPPFLAGS="${CFLAGS} -pg"
  CXXFLAGS="${CFLAGS} -pg"
fi

if test "$use_shell" == "yes"; then
  AC_PROG_LN_S
fi

AC_CONFIG_FILES([Makefile src/Makefile igraph.pc igraph_Info.plist debian/Makefile doc/Makefile doc/book/Makefile interfaces/R/configure.in interfaces/R/Makefile interfaces/R/src/Makevars.win interfaces/R/DESCRIPTION interfaces/Makefile interfaces/shell/Makefile])
AC_OUTPUT

AC_MSG_RESULT([igraph successfully configured.])
AC_MSG_RESULT([  GraphML format support -- $graphml_support])
AC_MSG_RESULT([  GMP library support    -- $gmp_support])
AC_MSG_RESULT([  Use internal ARPACK    -- $internal_arpack])
AC_MSG_RESULT([  Use internal LAPACK    -- $internal_lapack])
AC_MSG_RESULT([  Use internal BLAS      -- $internal_blas])
AC_MSG_RESULT([  Debug build            -- $debug])
AC_MSG_RESULT([  Profiling              -- $use_gprof])
AC_MSG_RESULT([  Shell interface        -- $use_shell])
